# vi:syntax=python
# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4
# -*- mode: python -*-
# TEST_INT=VF

TCCL(
    include = [
        "../../../config-templates/tc/template_tc_filtertest_soc_v4_and_v6_into_v6_vxlan_setup.config",
    ],

    test_setup = [
    ],

    test_teardown = [
    ],

    traffic_generators = [
        CustomTrafficGenerator(
            title="soc_src_mac_testcase",
            source=Ref("traffic_dut"),
            destination=Ref("traffic_partner"),
            source_interface=Ref("HOST1_DEV_PF0_VF0"),
            destination_interface=Ref("HOST2_DEV_PF0"),
            duration=10,
            analyzer=[
                Pass(),
                Fail(),
                Fail()
            ],
            skip_layers="Raw",
            packet=[
                """
                Ether(
                    src={HOST1_PF0_VF0_MAC},
                    dst={HOST2_PF0_VF0_MAC},
                    type=0x800
                ) /
                IP(
                    src={HOST1_p},
                    dst={HOST2_p},
                    tos={tos},
                    flags=2
                )
                """
            ],
            expected=[
                """
                Ether(
                    src={OVS_HOST1_PF0_MAC},
                    dst={OVS_HOST2_PF0_MAC}
                ) /
                IPv6(
                    src={OVS_HOST1_6l},
                    dst={OVS_HOST2_6l},
                    version=6,
                    tc=0,
                    fl=0,
                    nh=0x11,
                    hlim=64
                ) /
                UDP(
                    sport=0,
                    dport=4789,
                    chksum=0x0
                ) /
                VXLAN(
                    vni=4000
                ) /
                Ether(
                    src={HOST1_PF0_VF0_MAC},
                    dst={HOST2_PF0_VF0_MAC},
                    type=0x800
                ) /
                IP(
                    src={HOST1_p},
                    dst={HOST2_p},
                    tos={tos},
                    flags=2
                )
                """
            ],
            packet_arguments={
                "OVS_HOST1_PF0_MAC": MacAddress(
                    client=Ref("admin_dut"),
                    network="l",
                ),
                "OVS_HOST2_PF0_MAC": MacAddress(
                    client=Ref("admin_partner"),
                    network="l",
                ),
                "OVS_HOST1_6l": IpAddress(
                    client=Ref("admin_dut"),
                    network="6l",
                ),
                "OVS_HOST2_6l": IpAddress(
                    client=Ref("admin_partner"),
                    network="6l",
                ),
                "HOST1_PF0_VF0_MAC": [
                    MacAddress(
                        client=Ref("x86_dut"),
                        network="p",
                    ),
                    MacAddress(
                        client=Ref("x86_partner"),
                        network="p",
                    ),
                    "00:11:22:33:44:55",
                ],
                "HOST2_PF0_VF0_MAC": MacAddress(
                    client=Ref("x86_partner"),
                    network="p",
                ),
                "HOST1_p": IpAddress(
                    client=Ref("x86_dut"),
                    network="p",
                ),
                "HOST2_p": IpAddress(
                    client=Ref("x86_partner"),
                    network="p",
                ),
                "tos": [
                    0,
                    1,
                    2,
                ],
            },
        ),
    ],
)

