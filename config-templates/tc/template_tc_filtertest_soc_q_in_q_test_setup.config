# vi:syntax=python
# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4
# -*- mode: python -*-

"""
if [[ "$(hostname -s)" == "OVS_HOST" ]] ; then
   #stop OVS
   OVS_CTL='/usr/share/openvswitch/scripts/ovs-ctl'

   ${OVS_CTL} --system-id=c-model --no-monitor stop
   ${OVS_CTL} --system-id=c-model --delete-bridges --no-monitor start
   ${OVS_CTL} --system-id=c-model --no-monitor stop

   ip link set dev DEV_PF0 down
   ip addr flush dev DEV_PF0
   ip link set dev DEV_PF0 up
   #(v4 PF address)
   ip addr add dev DEV_PF0 HOST1_l/21
fi

if [[ "$(hostname -s)" == "HOST1" ]] ; then
   #(v4 vf_rep address)
   ip link set dev DEV_PF0_VF0 down
   ip addr flush dev DEV_PF0_VF0
   ip link set dev DEV_PF0_VF0 address HOST1_PF0_VF0_MAC
   ip addr add dev DEV_PF0_VF0 HOST1_p/21
   ip link set dev DEV_PF0_VF0 up
   ip neighbour del dev DEV_PF0_VF0 HOST2_p || true
   ip neighbour add dev DEV_PF0_VF0 lladdr HOST2_PF0_VF0_MAC HOST2_p
fi

if [[ "$(hostname -s)" == "OVS_HOST" ]] ; then
   # General cleanup
   ip link del dev vxlan0 || true
   ip link del dev geneve0 || true

   # Create vxan intf
   ip link add vxlan0 type vxlan external dstport 4789
   ip link set dev vxlan0 up
   tc qdisc add dev vxlan0 ingress

   ip link set dev DEV_PF0_VF0_REP down
   ip link set dev DEV_PF0_VF0_REP address DEV_PF0_VF0_REP_MAC
   ip link set dev DEV_PF0_VF0_REP up

   for intf in DEV_PF0 DEV_PF0_VF0_REP
   do
     if ! tc qdisc show dev $intf | grep -Eq '^qdisc ingress'
     then
        tc qdisc add dev $intf ingress
     fi
   done

   # TC cleanup
   tc filter del dev DEV_PF0_VF0_REP parent ffff:
   tc filter del dev DEV_PF0 parent ffff:

   # Add tc rules for ip traffic in both directions
   tc filter add dev DEV_PF0_VF0_REP parent ffff: chain 0 prio 2 protocol ip \
      flower skip_sw dst_mac HOST2_PF0_VF0_MAC src_mac HOST1_PF0_VF0_MAC \
      action vlan  push id 100 protocol 802.1ad priority 0 \
      action vlan  push id 200 protocol 802.1Q priority 0 \
      action mirred egress redirect dev DEV_PF0

   tc filter add dev DEV_PF0  parent ffff: chain 0 prio 2 protocol 802.1ad \
      flower skip_sw vlan_id 100 vlan_ethtype 802.1Q vlan_prio 0 \
       cvlan_id 200 cvlan_ethtype ip cvlan_prio 0 \
       dst_mac HOST1_PF0_VF0_MAC src_mac HOST2_PF0_VF0_MAC  \
      action vlan pop \
      action vlan pop \
      action mirred egress redirect dev DEV_PF0_VF0_REP
fi


# Automated test config data
AUTO_OFFLOAD_INTFS='DEV_PF0 DEV_PF0_VF0_REP'
AUTO_TEST_INTFS='HOST2_p'
AUTO_TEST_PING='yes'
AUTO_TEST_PING_PARAMS='opt1="-c ", opt1_values="100"'
AUTO_TEST_NETPERF='yes'
AUTO_TEST_NETPERF_PARAMS='opt1="-t ", opt1_values="TCP_STREAM,UDP_STREAM,TCP_RR,UDP_RR" opt2="-l" opt2_values="60"'
"""

TCCL(
    test_setup = [
        # ip link add vxlan0 type vxlan external dstport 4789
        Ip(
            client=Ref("admin_dut"),
            command='link',
            argument=[
                'add {VXLAN_NAME} type vxlan external dstport {DSTPORT}',
                'set dev {VXLAN_NAME} up',
            ],
            argument_params={
                "DSTPORT": 4789,
                "VXLAN_NAME": "vxlan0",
            },
        ),
        Ip(
            client=Ref("admin_dut"),
            command='address',
            argument='show',
        ),
        TC(
            client=Ref("admin_dut"),
            command='qdisc',
            argument=[
                'add dev {VXLAN_NAME} ingress',
                'add dev {DEV_PF0_VF0_REP} ingress',
                 'add dev {DEV_PF0} ingress',
            ],
            argument_params={
                "VXLAN_NAME": "vxlan0",
                "DEV_PF0": Ref("HOST1_DEV_PF0"),
                "DEV_PF0_VF0_REP": Ref("HOST1_DEV_PF0_VF0_REP"),
            },
        ),
        TC(
            client=Ref("admin_dut"),
            command='filter',
            argument=[
                "del dev {DEV_PF0_VF0_REP} parent ffff:",
                "del dev {DEV_PF0} parent ffff:",
            ],
            argument_params={
                "DSTPORT": 4789,
                "VXLAN_NAME": "vxlan0",
                "DEV_PF0": Ref("HOST1_DEV_PF0"),
                "DEV_PF0_VF0_REP": Ref("HOST1_DEV_PF0_VF0_REP"),
            },
            ignore=[
                "Error: Parent Qdisc doesn't exists.",
            ],
        ),

        TC(
            client=Ref("admin_dut"),
            command='filter',
            argument=[
                "add dev {DEV_PF0_VF0_REP} parent ffff: chain 0 prio 2 protocol ip "
                "flower skip_sw dst_mac {HOST2_PF0_VF0_MAC} src_mac {HOST1_PF0_VF0_MAC} "
                "action vlan push id 100 protocol 802.1ad priority 0 "
                "action vlan push id 200 protocol 802.1Q priority 0 "
                "action mirred egress redirect dev {DEV_PF0}",

                "add dev {DEV_PF0} parent ffff: chain 0 prio 3 protocol 802.1ad "
                "flower skip_sw vlan_id 100 vlan_ethtype 802.1Q vlan_prio 0 "
                "cvlan_id 200 cvlan_ethtype ip cvlan_prio 0 "
                "dst_mac {HOST1_PF0_VF0_MAC} src_mac {HOST2_PF0_VF0_MAC} "
                "action vlan pop "
                "action vlan pop "
                "action mirred egress redirect dev {DEV_PF0_VF0_REP}",
            ],
            argument_params={
                "DEV_PF0_VF0_REP": Ref("HOST1_DEV_PF0_VF0_REP"),
                "HOST1_PF0_VF0_MAC": MacAddress(
                    client=Ref("x86_dut"),
                    network="p",
                ),
                "HOST2_PF0_VF0_MAC": MacAddress(
                    client=Ref("x86_partner"),
                    network="p",
                ),
                "DEV_PF0": Ref("HOST1_DEV_PF0"),
            },
        ),
        Ip(
            client=Ref("admin_dut"),
            command='address',
            argument='show',
        ),
        Ip(
            client=Ref("admin_dut"),
            command='-d link',
            argument='show',
        ),
        TC(
            client=Ref("admin_dut"),
            command='filter',
            argument=[
                "show dev {DEV_PF0_VF0_REP} egress",
                "show dev {DEV_PF0} egress",
            ],
            argument_params={
                "DEV_PF0": Ref("HOST1_DEV_PF0"),
                "DEV_PF0_VF0_REP": Ref("HOST1_DEV_PF0_VF0_REP"),
            },
        ),
        TC(
            client=Ref("admin_dut"),
            command='chain',
            argument=[
                "show dev {DEV_PF0_VF0_REP} egress",
                "show dev {DEV_PF0} egress",
            ],
            argument_params={
                "DEV_PF0": Ref("HOST1_DEV_PF0"),
                "DEV_PF0_VF0_REP": Ref("HOST1_DEV_PF0_VF0_REP"),
            },
        ),
    ],

    test_teardown = [
    ],

    traffic_generators = [
    ],
)

